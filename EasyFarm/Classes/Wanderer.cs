using System;
using System.Collections.Generic;
using System.Linq;
using FFACETools;

namespace EasyFarm.Classes
{
    /// <summary>
    ///     Generates new random positions to travel to.
    /// </summary>
    public class Wanderer
    {
        /// <summary>
        ///     The current game session.
        /// </summary>
        private readonly FFACE _fface;

        /// <summary>
        ///     Our random number generator.
        /// </summary>
        private readonly Random _random = new Random();

        /// <summary>
        ///     The last time we moved.
        /// </summary>
        private DateTime _lastMoved = DateTime.Now;

        /// <summary>
        ///     Create a new wanderer to generate new points to wander to.
        /// </summary>
        /// <param name="fface"></param>
        public Wanderer(FFACE fface)
        {
            _fface = fface;
            MoveDelay = 5;
        }

        /// <summary>
        ///     The timespawn to wait after each movement.
        /// </summary>
        public int MoveDelay { get; set; }

        /// <summary>
        ///     Whether we can wander to the next point.
        /// </summary>
        /// <returns></returns>
        public bool CanMove()
        {
            return _lastMoved.AddSeconds(MoveDelay) < DateTime.Now;
        }

        /// <summary>
        ///     Get a random position to travel to that is within the bounding box
        ///     generated by the given points.
        /// </summary>
        /// <param name="positions"></param>
        /// <param name="distance"></param>
        /// <returns></returns>
        public FFACE.Position GetPosition(IEnumerable<FFACE.Position> positions, float distance)
        {
            // Get the position of the player which will be our origin. 
            var origin = new FFACE.Position();

            // Get the bounding box which will be our wandering area. 
            var boundingBox = new BoundingBox(positions);

            // Generate the new X and Y coordinates. 
            origin.X = GenerateX(_fface.Player.Position, boundingBox, distance);
            origin.Z = GenerateZ(_fface.Player.Position, boundingBox, distance);

            // Create a point that represents the center of the bounding box. 
            var center = new FFACE.Position
            {
                X = new List<float>
                {
                    boundingBox.XMin,
                    boundingBox.XMax
                }.Average(),
                Z = new List<float>
                {
                    boundingBox.ZMin,
                    boundingBox.ZMax
                }.Average()
            };


            // Make player goto center if one of the coordinates are out of bounds. 
            if (center.X == origin.X || center.Z == origin.Z) return center;

            // Return the new position to travel to. 
            return origin;
        }

        /// <summary>
        ///     Gets a newly random generated coordinate in the X direction.
        /// </summary>
        /// <param name="origin"></param>
        /// <param name="boundingBox"></param>
        /// <param name="distance"></param>
        /// <returns></returns>
        private float GenerateX(FFACE.Position origin, BoundingBox boundingBox, float distance)
        {
            return GenerateCoordinate(origin.X, boundingBox.XMax, boundingBox.XMin, distance);
        }

        /// <summary>
        ///     Gets a newly random generated coordinate in the Y direction.
        /// </summary>
        /// <param name="origin"></param>
        /// <param name="boundingBox"></param>
        /// <param name="distance"></param>
        /// <returns></returns>
        private float GenerateZ(FFACE.Position origin, BoundingBox boundingBox, float distance)
        {
            return GenerateCoordinate(origin.Z, boundingBox.ZMax, boundingBox.ZMin, distance);
        }

        /// <summary>
        ///     Generates a new random coordinate (X or Y) which the player will use for wandering.
        /// </summary>
        /// <param name="coordinate"></param>
        /// <param name="maxValue"></param>
        /// <param name="minValue"></param>
        /// <param name="distance"></param>
        /// <returns></returns>
        private float GenerateCoordinate(float coordinate, float maxValue, float minValue, float distance)
        {
            // Should we travel in the positive or negative direction?
            var direction = NextBoolean();

            // If postives... 
            if (direction && coordinate <= maxValue)
            {
                coordinate += distance;
            }
            else if (!direction && coordinate >= minValue)
            {
                coordinate -= distance;
            }
            else
            {
                // Go to the middle?
                coordinate = (maxValue + minValue)/2;
            }

            return coordinate;
        }

        /// <summary>
        ///     Returns random boolean values.
        /// </summary>
        /// <returns></returns>
        private bool NextBoolean()
        {
            return Convert.ToBoolean(_random.Next(0, 2));
        }
    }
}